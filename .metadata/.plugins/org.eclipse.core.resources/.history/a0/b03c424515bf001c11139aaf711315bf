import java.util.Scanner;

public class Calendar {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scan = new Scanner(System.in);

		int allDay = 0, startDay = 0, endDay = 0;
		int year = 0, month = 0;

		System.out.println("년도를 입력하세요. ");
		year = scan.nextInt();

		System.out.println("월을 입력하세요. ");
		month = scan.nextInt();

		for (int i = 1; i < year; i++) {//입력한 년도보다 작년까지의 합이 필요함으로 i < year로 사용
			allDay += 365;
			//1년 지날때마다 365씩 더해줌
			System.out.println(allDay);
			if ((((i % 4) == 0) && (i % 100) != 0) || ((i % 400) == 0)) {
				//if문에서 year가 아닌 i를 써주는 이유는 for문에서 1년부터 입력한 year까지의 합을 구해주는 과정이기 때문.
				//i가 아닌 year를 사용할 경우 1~year까지의 윤년 확인이 아닌 입력받은 year의 윤년 유무만 확인하게 된다.
				allDay++;
				//윤년인 경우 2월이 28일에서 29일이 되어 하루가 더 증가하므로 1씩 더해줌
		 // 윤년 및 평년 구하는 방법
		 // 특정 년(Year)을 입력 받아 해당 년이 윤년인지 평년인지 판별
		 // 1. 윤년은 4년에 한번 발생 (year % 4 == 0)
		 // 2. 1의 조건을 만족 하는 것 중, 100년 마다 평년 (year % 100 == 0)
		 // 3. 2의 조건을 만족 하는 것 중, 400년 마다 윤년 (year % 400 == 0)
             
				
			}
		}
		for (int j = 1; j < month; j++) {//입력한 거보다 이전 달까지의 합이 필요하므로 j < month를 사용
			if ((j == 4) || (j == 6) || (j == 9) || (j == 11)) {//30일까지 있는 월들의 합
				allDay += 30;
				
			} 
			else if (j == 2) {//29일까지인 2월 찾기
				if ((((year % 4) == 0) && (year % 100) != 0) || ((year % 400) == 0)) {
					//j는 월을 의미하기 때문에 윤년을 확인하기 위해서는 입력한 year으로 비교해야한다.
					allDay += 29;
				} else {
					allDay += 28;
				}
			} else {//2, 4, 6, 9, 11 이외의 월은 31일까지
				allDay += 31;
			}
		
			System.out.println("allDay"+allDay);
		
		}}}
